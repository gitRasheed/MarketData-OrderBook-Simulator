Timer unit: 1e-07 s

Total time: 0.428452 s
File: C:\Users\rashe\Documents\Projects\Python\MarketData-OrderBook-Simulator\profiling\profile_orderbook.py
Function: run_mixed_workload at line 32

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    32                                           def run_mixed_workload(ob, operations, orders):
    33         1          4.0      4.0      0.0      order_index = 0
    34     10001      28449.0      2.8      0.7      for operation in operations:
    35     10000      23655.0      2.4      0.6          if operation == "add":
    36      3979      11197.0      2.8      0.3              order = orders[order_index]
    37      3979     196089.0     49.3      4.6              o = Order(order['id'], "limit", order['side'], Decimal(order['price']), Decimal(str(order['quantity'])), ob.ticker.symbol)
    38      3979    2004578.0    503.8     46.8              ob.add_order(o)
    39      3979      10871.0      2.7      0.3              order_index += 1
    40      6021      13237.0      2.2      0.3          elif operation == "cancel":
    41      2027       4949.0      2.4      0.1              if ob.orders:
    42      2027     444006.0    219.0     10.4                  order_id = list(ob.orders.keys())[order_index % len(ob.orders)]
    43      2027       4951.0      2.4      0.1                  try:
    44      2027     564454.0    278.5     13.2                      ob.cancel_order(order_id)
    45                                                           except OrderNotFoundException:
    46                                                               pass
    47      3994       8301.0      2.1      0.2          elif operation == "market":
    48       518       1488.0      2.9      0.0              order = orders[order_index]
    49       518      21180.0     40.9      0.5              o = Order(order['id'], "market", order['side'], None, Decimal(str(order['quantity'])), ob.ticker.symbol)
    50       518        984.0      1.9      0.0              try:
    51       518     274970.0    530.8      6.4                  ob.add_order(o)
    52                                                       except InsufficientLiquidityException:
    53                                                           pass
    54       518       1416.0      2.7      0.0              order_index += 1
    55      3476       7208.0      2.1      0.2          elif operation == "best_bid_ask":
    56       968      29563.0     30.5      0.7              _ = ob.best_bid_ask
    57      2508       5567.0      2.2      0.1          elif operation == "snapshot":
    58       998     627408.0    628.7     14.6              ob.get_order_book_snapshot(10)

Total time: 0.220978 s
File: C:\Users\rashe\Documents\Projects\Python\MarketData-OrderBook-Simulator\src\orderbook.py
Function: add_order at line 15

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    15                                               def add_order(self, order: Order) -> Tuple[int, List[Tuple[int, Decimal, Decimal]]]:
    16      4497      16184.0      3.6      0.7          if order.quantity <= 0:
    17                                                       raise InvalidQuantityException("Order quantity must be positive")
    18      4497      11425.0      2.5      0.5          if order.type == "market":
    19       518     264174.0    510.0     12.0              return self._process_market_order(order)
    20      3979       9026.0      2.3      0.4          elif order.type == "limit":
    21      3979    1908969.0    479.8     86.4              return self._process_limit_order(order)
    22                                                   else:
    23                                                       raise InvalidOrderException("Invalid order type")

Total time: 0.0526766 s
File: C:\Users\rashe\Documents\Projects\Python\MarketData-OrderBook-Simulator\src\orderbook.py
Function: cancel_order at line 25

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    25                                               def cancel_order(self, order_id: int) -> None:
    26      2027       8681.0      4.3      1.6          if order_id not in self.orders:
    27                                                       raise OrderNotFoundException("Order not found")
    28      2027       7245.0      3.6      1.4          order = self.orders[order_id]
    29      2027     510840.0    252.0     97.0          self._remove_order(order)

Total time: 0.0609776 s
File: C:\Users\rashe\Documents\Projects\Python\MarketData-OrderBook-Simulator\src\orderbook.py
Function: get_order_book_snapshot at line 49

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    49                                               def get_order_book_snapshot(self, levels: int) -> Dict[str, List[Tuple[Decimal, Decimal]]]:
    50       998     314213.0    314.8     51.5          bids = self._get_snapshot_for_tree(self.bids, levels, reverse=True)
    51       998     292259.0    292.8     47.9          asks = self._get_snapshot_for_tree(self.asks, levels, reverse=False)
    52       998       3304.0      3.3      0.5          return {"bids": bids, "asks": asks}

Total time: 0.172079 s
File: C:\Users\rashe\Documents\Projects\Python\MarketData-OrderBook-Simulator\src\orderbook.py
Function: _process_limit_order at line 54

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    54                                               def _process_limit_order(self, order: Order) -> Tuple[int, List[Tuple[int, Decimal, Decimal]]]:
    55      3979      67353.0     16.9      3.9          if not self.ticker.is_valid_price(order.price):
    56                                                       raise InvalidTickSizeException(f"Invalid price. Must be a multiple of {self.ticker.tick_size}")
    57                                           
    58      3979       7871.0      2.0      0.5          filled_orders = []
    59      3979       8895.0      2.2      0.5          remaining_quantity = order.quantity
    60                                           
    61      3979      12651.0      3.2      0.7          opposing_tree = self.asks if order.side == "buy" else self.bids
    62      3979      46911.0     11.8      2.7          best_opposing_price = opposing_tree.min().price if opposing_tree.root else None
    63                                           
    64      6171      22469.0      3.6      1.3          while remaining_quantity > 0 and best_opposing_price and \
    65      5055      15766.0      3.1      0.9                ((order.side == "buy" and order.price >= best_opposing_price) or \
    66      2870       8881.0      3.1      0.5                 (order.side == "sell" and order.price <= best_opposing_price)):
    67      2192      17129.0      7.8      1.0              best_level = opposing_tree.min() if order.side == "buy" else opposing_tree.max()
    68      2192     158263.0     72.2      9.2              filled_quantity, level_orders = self._match_orders_at_level(best_level, remaining_quantity)
    69      2192       6990.0      3.2      0.4              remaining_quantity -= filled_quantity
    70      2192       7347.0      3.4      0.4              filled_orders.extend(level_orders)
    71                                           
    72                                           
    73      2192      15160.0      6.9      0.9              if best_level.order_count == 0:
    74      1092     304300.0    278.7     17.7                  opposing_tree.delete(best_level.price)
    75      1092      12194.0     11.2      0.7                  best_opposing_price = opposing_tree.min().price if opposing_tree.root else None
    76                                           
    77      3979      10797.0      2.7      0.6          if remaining_quantity > 0:
    78      2863       7894.0      2.8      0.5              tree = self.bids if order.side == "buy" else self.asks
    79      2863     519278.0    181.4     30.2              level = tree.find(order.price)
    80      2863       5648.0      2.0      0.3              if not level:
    81      1578      40557.0     25.7      2.4                  level = PriceLevel(order.price)
    82      1578     337571.0    213.9     19.6                  tree.insert(level)
    83      2863       7261.0      2.5      0.4              order.quantity = remaining_quantity
    84      2863      56978.0     19.9      3.3              level.add_order(order)
    85      2863      11642.0      4.1      0.7              self.orders[order.id] = order
    86                                                       #print(f"Added remaining order to book: ID={order.id}, Quantity={remaining_quantity}")
    87                                           
    88      3979      10983.0      2.8      0.6          return order.id, filled_orders

Total time: 0.0238278 s
File: C:\Users\rashe\Documents\Projects\Python\MarketData-OrderBook-Simulator\src\orderbook.py
Function: _process_market_order at line 90

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    90                                               def _process_market_order(self, order: Order) -> Tuple[int, List[Tuple[int, Decimal, Decimal]]]:
    91       518       1711.0      3.3      0.7          opposing_tree = self.asks if order.side == "buy" else self.bids
    92       518       1068.0      2.1      0.4          remaining_quantity = order.quantity
    93       518       1027.0      2.0      0.4          filled_orders = []
    94                                           
    95      1523       5648.0      3.7      2.4          while remaining_quantity > 0 and opposing_tree.root:
    96      1005       8484.0      8.4      3.6              best_level = opposing_tree.min() if order.side == "buy" else opposing_tree.max()
    97      1005       1923.0      1.9      0.8              if not best_level:
    98                                                           break
    99                                                       
   100      1005      77489.0     77.1     32.5              filled_quantity, level_orders = self._match_orders_at_level(best_level, remaining_quantity)
   101      1005       3188.0      3.2      1.3              remaining_quantity -= filled_quantity
   102      1005       3339.0      3.3      1.4              filled_orders.extend(level_orders)
   103                                           
   104      1005       6929.0      6.9      2.9              if best_level.order_count == 0:
   105       497     124775.0    251.1     52.4                  opposing_tree.delete(best_level.price)
   106                                           
   107       518       1340.0      2.6      0.6          if remaining_quantity > 0:
   108                                                       raise InsufficientLiquidityException("Not enough liquidity to fill market order")
   109                                           
   110       518       1357.0      2.6      0.6          return order.id, filled_orders

